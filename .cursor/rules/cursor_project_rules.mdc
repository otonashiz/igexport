---
description:
globs:
alwaysApply: false
---
# IGExportGuru - Cursor项目规则

## 📋 项目概述
IGExportGuru是一个Instagram关注者/关注列表导出工具，支持多语言，使用现代化的技术栈构建。

## 📚 项目文档参考
在开发过程中，必须严格遵循以下文档：
- `.cursor/rules/prd_document.mdc` - 产品需求说明文档
- `.cursor/rules/tech_stack_document.mdc` - 技术栈说明文档
- `.cursor/rules/frontend_guidelines_document.mdc` - 前端开发指南
- `.cursor/rules/backend_structure.mdc` - 后端架构文档
- `.cursor/rules/implementation_plan.mdc` - 实施计划文档

## 🎯 核心开发原则

### 1. 代码质量原则
- **可读性优先**: 代码必须清晰易懂，使用有意义的变量和函数命名
- **类型安全**: 100% TypeScript覆盖率，严格类型检查
- **一致性**: 遵循统一的代码风格和命名规范
- **可维护性**: 模块化设计，低耦合高内聚

### 2. 用户体验原则
- **性能第一**: 首屏加载<2秒，交互响应<100ms
- **响应式设计**: 完美适配所有设备（手机、平板、桌面）
- **无障碍访问**: 符合WCAG标准
- **多语言支持**: 支持5种语言，自动检测用户语言

### 3. 安全性原则
- **输入验证**: 所有用户输入必须验证和清理
- **请求限制**: 实施合理的API频率限制
- **错误处理**: 不暴露敏感信息
- **数据保护**: 最小化数据收集和存储

## 🏗️ 架构设计规范

### 前端架构
```
src/
├── components/         # 组件库
│   ├── ui/            # 基础UI组件
│   ├── features/      # 功能组件
│   └── layout/        # 布局组件
├── hooks/             # 自定义Hooks
├── stores/            # Zustand状态管理
├── types/             # TypeScript类型
├── utils/             # 工具函数
├── locales/           # 国际化文件
└── styles/            # 样式文件
```

### 后端架构
```
src/
├── controllers/       # 控制器层
├── services/          # 服务层
├── middleware/        # 中间件
├── types/             # TypeScript类型
├── utils/             # 工具函数
└── config/            # 配置文件
```

## 💻 技术栈要求

### 前端技术栈
- **核心**: React 18+ + TypeScript + Vite
- **样式**: Tailwind CSS + Headless UI
- **状态管理**: Zustand
- **国际化**: react-i18next
- **图标**: Font Awesome 6.5+
- **文件处理**: xlsx + FileSaver.js

### 后端技术栈
- **核心**: Node.js 18+ + Express + TypeScript
- **数据获取**: Puppeteer
- **安全**: helmet + cors + express-rate-limit
- **文件处理**: xlsx
- **工具**: lodash + dayjs + uuid

## 🎨 UI/UX设计规范

### 设计系统
- **风格**: Linear App简约 + Instagram配色 + Getsbi现代感
- **色彩**: Instagram渐变色系 + 中性色调
- **字体**: Inter (系统字体降级)
- **图标**: Font Awesome (避免使用emoji)

### 响应式断点
```css
/* 移动端优先 */
sm: 640px    /* 小型设备 */
md: 768px    /* 平板设备 */
lg: 1024px   /* 笔记本电脑 */
xl: 1280px   /* 桌面显示器 */
2xl: 1536px  /* 大型显示器 */
```

### 组件设计原则
- **原子化**: 基础组件职责单一
- **组合性**: 复杂组件通过组合构建
- **可复用**: 通过props控制变体和状态
- **类型安全**: 严格的TypeScript接口定义

## 📝 代码规范

### 命名规范
```typescript
// 组件: PascalCase
export const ExportForm: React.FC<ExportFormProps> = () => {}

// 变量/函数: camelCase
const userName = 'example';
const handleSubmit = () => {};

// 常量: SCREAMING_SNAKE_CASE
const MAX_EXPORT_COUNT = 200;

// 类型/接口: PascalCase
interface InstagramUser {
  id: string;
  userName: string;
}

// 文件名: kebab-case或PascalCase
export-form.component.tsx
ExportForm.tsx
```

### 文件组织规范
```typescript
// 1. 外部库导入
import React from 'react';
import { useTranslation } from 'react-i18next';

// 2. 内部组件导入
import { Button } from '@/components/ui/Button';
import { Input } from '@/components/ui/Input';

// 3. 类型导入
import type { ExportFormProps } from '@/types/export';

// 4. 工具函数导入
import { validateUsername } from '@/utils/validation';

// 5. 组件实现
export const ExportForm: React.FC<ExportFormProps> = ({ onSubmit }) => {
  // 组件逻辑
};
```

### TypeScript规范
```typescript
// 严格的接口定义
interface InstagramUser {
  id: string;
  userName: string;
  fullName: string;
  profileUrl: string;
  isVerified: boolean;
  followerCount?: number; // 可选属性使用?
}

// 联合类型
type ExportType = 'followers' | 'following';

// 泛型使用
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
}

// 严格的函数签名
const exportUsers = async (
  username: string,
  type: ExportType
): Promise<ApiResponse<InstagramUser[]>> => {
  // 函数实现
};
```

## 🔧 开发工具配置

### ESLint配置
```json
{
  "extends": [
    "eslint:recommended",
    "@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended"
  ],
  "rules": {
    "react/react-in-jsx-scope": "off",
    "react/prop-types": "off",
    "@typescript-eslint/no-unused-vars": "error",
    "prefer-const": "error",
    "no-var": "error"
  }
}
```

### Prettier配置
```json
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 80,
  "tabWidth": 2,
  "useTabs": false
}
```

## 🛡️ 安全开发规范

### 前端安全
- **XSS防护**: 使用dangerouslySetInnerHTML时必须先清理HTML
- **数据验证**: 所有用户输入在前端和后端都要验证
- **敏感信息**: 不在前端代码中存储API密钥或敏感数据

### 后端安全
- **输入验证**: 使用专门的验证服务
- **请求限制**: 不同API端点设置不同的频率限制
- **错误处理**: 统一错误响应格式，不暴露系统信息
- **日志记录**: 记录关键操作和错误信息

```typescript
// 安全的输入验证示例
export class ValidationService {
  validateUsername(username: string): ValidationResult {
    // 清理输入
    const cleanUsername = username.trim().toLowerCase();
    
    // 格式验证
    const usernameRegex = /^[a-zA-Z0-9._]{1,30}$/;
    if (!usernameRegex.test(cleanUsername)) {
      return { isValid: false, error: 'Invalid username format' };
    }
    
    return { isValid: true, cleanValue: cleanUsername };
  }
}
```

## 🌍 国际化规范

### 翻译文件结构
```json
{
  "common": {
    "loading": "Loading...",
    "error": "Error",
    "success": "Success"
  },
  "export": {
    "inputPlaceholder": "Enter Instagram username or URL",
    "exportButton": "Export (Max {{maxCount}} users)"
  }
}
```

### 使用规范
```typescript
// Hook使用
const { t } = useTranslation();

// 简单翻译
<span>{t('common.loading')}</span>

// 带参数翻译
<button>{t('export.exportButton', { maxCount: 200 })}</button>

// 复数形式
<span>{t('users', { count: userCount })}</span>
```

## 📊 性能优化要求

### 前端性能
- **代码分割**: 使用React.lazy和dynamic imports
- **缓存策略**: 合理使用useMemo和useCallback
- **包体积**: 监控打包大小，避免不必要的依赖
- **图片优化**: 使用WebP格式，支持懒加载

### 后端性能
- **响应压缩**: 启用gzip压缩
- **内存管理**: 及时清理临时文件和缓存
- **连接池**: 复用数据库连接
- **异步处理**: 长时间操作使用异步处理

## 🧪 测试规范

### 单元测试
```typescript
// 组件测试示例
describe('Button Component', () => {
  it('renders correctly with primary variant', () => {
    render(<Button variant="primary">Click me</Button>);
    expect(screen.getByRole('button')).toHaveClass('bg-gradient-to-r');
  });

  it('shows loading state when loading prop is true', () => {
    render(<Button loading>Submit</Button>);
    expect(screen.getByRole('button')).toBeDisabled();
  });
});
```

### API测试
```typescript
// API接口测试示例
describe('Export API', () => {
  it('should validate username before export', async () => {
    const response = await request(app)
      .post('/api/export/analyze')
      .send({ username: 'invalid-user!' });
    
    expect(response.status).toBe(400);
    expect(response.body.success).toBe(false);
  });
});
```

## 🚀 部署规范

### 环境配置
```bash
# 开发环境
NODE_ENV=development
PORT=3001
CORS_ORIGIN=http://localhost:3000

# 生产环境
NODE_ENV=production
PORT=8080
CORS_ORIGIN=https://igexportguru.com
RATE_LIMIT_ENABLED=true
```

### 构建优化
```javascript
// Vite生产构建配置
export default defineConfig({
  build: {
    outDir: 'dist',
    sourcemap: false,
    minify: 'terser',
    rollupOptions: {
      output: {
        manualChunks: {
          vendor: ['react', 'react-dom'],
          ui: ['@headlessui/react'],
        },
      },
    },
  },
});
```

## 📝 Git工作流规范

### 分支管理
- **main**: 主分支，始终保持可部署状态
- **develop**: 开发分支，功能开发基础分支
- **feature/***: 功能分支，从develop分出
- **hotfix/***: 热修复分支，从main分出

### 提交规范
```bash
# 格式: type(scope): description

feat(auth): add user authentication
fix(ui): resolve button loading state issue
docs(readme): update installation instructions
style(components): format code with prettier
refactor(api): restructure export service
test(utils): add validation utility tests
chore(deps): update dependencies
```

### PR规范
- PR标题清晰描述变更内容
- 包含相关issue链接
- 通过所有自动化检查
- 至少一个同事review通过

## 🔍 代码审查清单

### 功能性检查
- [ ] 功能是否按需求正确实现
- [ ] 边界情况是否正确处理
- [ ] 错误处理是否完善
- [ ] 性能是否满足要求

### 代码质量检查
- [ ] 代码是否易读易理解
- [ ] 命名是否有意义
- [ ] 是否存在重复代码
- [ ] 是否遵循项目规范

### 安全性检查
- [ ] 输入是否正确验证
- [ ] 是否存在安全漏洞
- [ ] 敏感信息是否正确处理
- [ ] 权限控制是否正确

### 测试覆盖检查
- [ ] 是否包含必要的单元测试
- [ ] 测试用例是否覆盖主要场景
- [ ] 是否包含错误场景测试
- [ ] 测试是否能通过

## ⚠️ 开发注意事项

### 必须遵循的规则
1. **所有代码必须通过TypeScript类型检查**
2. **所有UI组件必须支持响应式设计**
3. **所有用户输入必须进行验证**
4. **所有API接口必须包含错误处理**
5. **所有文本内容必须支持国际化**

### 禁止的行为
1. **禁止使用any类型（除非特殊情况）**
2. **禁止直接操作DOM（使用React方式）**
3. **禁止在代码中硬编码文本（使用i18n）**
4. **禁止忽略错误处理**
5. **禁止提交未测试的代码**

### 性能要求
- 首屏加载时间 < 2秒
- 页面交互响应 < 100ms
- 移动端体验流畅
- 支持离线访问关键功能

### 兼容性要求
- 支持现代浏览器（Chrome 90+, Firefox 88+, Safari 14+）
- 支持移动端浏览器
- 支持屏幕阅读器
- 支持键盘导航

---

## 📞 获取帮助

遇到问题时的解决顺序：
1. 查看项目文档（.cursor/rules/目录下的文档）
2. 检查技术栈官方文档
3. 查看项目已有的类似实现
4. 询问团队成员
5. 记录问题和解决方案

---

*这些规则是项目成功的关键，每位开发者都必须严格遵循。*

*最后更新: 2024年12月*
*版本: v1.0*
