---
description: 
globs: 
alwaysApply: true
---
# IGExportGuru - 实施计划文档

## 📅 开发阶段概览

### 第一阶段：项目初始化与基础架构 (2-3天)
- 项目脚手架搭建
- 开发环境配置
- 基础架构代码

### 第二阶段：前端核心功能开发 (4-5天)
- UI组件库搭建
- 页面布局实现
- 状态管理配置

### 第三阶段：后端API开发 (3-4天)
- API接口实现
- 数据获取逻辑
- 安全策略配置

### 第四阶段：集成与优化 (2-3天)
- 前后端集成
- 多语言实现
- 性能优化

### 第五阶段：测试与部署 (2天)
- 功能测试
- 部署配置
- 上线发布

## 🚀 第一阶段：项目初始化与基础架构

### 1.1 前端项目搭建
**时间**: 1天
**负责**: 前端开发

#### 任务清单
- [ ] 使用Vite创建React + TypeScript项目
- [ ] 配置Tailwind CSS
- [ ] 安装和配置必要依赖
- [ ] 设置项目目录结构
- [ ] 配置ESLint和Prettier
- [ ] 配置路径别名(@/)

#### 具体步骤
```bash
# 1. 创建项目
npm create vite@latest igexportguru-frontend -- --template react-ts

# 2. 安装依赖
npm install tailwindcss @headlessui/react zustand react-i18next i18next xlsx file-saver

# 3. 安装开发依赖
npm install -D @types/file-saver autoprefixer postcss

# 4. 初始化Tailwind
npx tailwindcss init -p
```

#### 验收标准
- [x] 项目能够正常启动
- [x] Tailwind CSS样式生效
- [x] TypeScript类型检查通过
- [x] 代码格式化工具正常工作

### 1.2 后端项目搭建
**时间**: 1天
**负责**: 后端开发

#### 任务清单
- [ ] 创建Node.js + Express + TypeScript项目
- [ ] 配置项目目录结构
- [ ] 安装核心依赖包
- [ ] 配置开发环境
- [ ] 设置基础中间件

#### 具体步骤
```bash
# 1. 初始化项目
mkdir igexportguru-backend && cd igexportguru-backend
npm init -y

# 2. 安装核心依赖
npm install express cors helmet compression express-rate-limit
npm install puppeteer xlsx uuid dayjs lodash dotenv

# 3. 安装开发依赖
npm install -D typescript @types/node @types/express @types/cors
npm install -D nodemon ts-node @types/uuid @types/lodash

# 4. 初始化TypeScript配置
npx tsc --init
```

#### 验收标准
- [x] 服务器能够正常启动
- [x] API路由响应正常
- [x] 中间件配置生效
- [x] TypeScript编译无错误

### 1.3 基础配置文件
**时间**: 0.5天
**负责**: 全栈开发

#### 任务清单
- [ ] 创建前端配置文件
- [ ] 创建后端配置文件
- [ ] 设置环境变量模板
- [ ] 配置Git规范

#### 配置文件模板
前端 `vite.config.ts`:
```typescript
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
    },
  },
  server: {
    port: 3000,
    proxy: {
      '/api': {
        target: 'http://localhost:3001',
        changeOrigin: true,
      },
    },
  },
})
```

后端 `tsconfig.json`:
```json
{
  "compilerOptions": {
    "target": "ES2020",
    "module": "commonjs",
    "outDir": "./dist",
    "rootDir": "./src",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "resolveJsonModule": true,
    "baseUrl": "./src",
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["src/**/*"],
  "exclude": ["node_modules", "dist"]
}
```

## 🎨 第二阶段：前端核心功能开发

### 2.1 基础UI组件开发
**时间**: 2天
**负责**: 前端开发

#### 任务清单
- [ ] Button组件 (支持多种变体和状态)
- [ ] Input组件 (支持验证和错误显示)
- [ ] Table组件 (支持排序和分页)
- [ ] ProgressBar组件 (支持百分比显示)
- [ ] Loading组件 (骨架屏和加载动画)

#### 开发顺序
1. **Button组件** (4小时)
   ```typescript
   // components/ui/Button.tsx
   interface ButtonProps {
     variant?: 'primary' | 'secondary' | 'ghost';
     size?: 'sm' | 'md' | 'lg';
     loading?: boolean;
     children: React.ReactNode;
   }
   ```

2. **Input组件** (3小时)
   ```typescript
   // components/ui/Input.tsx
   interface InputProps {
     label?: string;
     error?: string;
     placeholder?: string;
     value: string;
     onChange: (value: string) => void;
   }
   ```

3. **Table组件** (4小时)
   ```typescript
   // components/ui/Table.tsx
   interface TableProps<T> {
     data: T[];
     columns: TableColumn<T>[];
     loading?: boolean;
   }
   ```

4. **其他组件** (5小时)

#### 验收标准
- [x] 所有组件响应式设计
- [x] 支持深色/浅色主题
- [x] 无障碍访问支持
- [x] TypeScript类型完整

### 2.2 页面布局开发
**时间**: 1.5天
**负责**: 前端开发

#### 任务清单
- [ ] Header组件 (Logo + 语言切换)
- [ ] Footer组件 (使用说明 + 免责声明)
- [ ] MainLayout组件 (整体布局)
- [ ] 响应式断点测试

#### 开发顺序
1. **Header组件** (3小时)
   - Logo设计实现
   - 语言切换下拉菜单
   - 移动端汉堡菜单

2. **MainLayout组件** (4小时)
   - 整体布局结构
   - 响应式适配
   - 滚动行为处理

3. **Footer组件** (2小时)
   - 链接导航
   - 版权信息
   - 免责声明

#### 验收标准
- [x] 移动端完美适配
- [x] 平板端体验良好
- [x] 桌面端充分利用空间
- [x] 跨浏览器兼容性

### 2.3 功能组件开发
**时间**: 1.5天
**负责**: 前端开发

#### 任务清单
- [ ] ExportForm组件 (输入和选项)
- [ ] DataPreview组件 (数据预览表格)
- [ ] LanguageSwitch组件 (语言切换器)
- [ ] StatusIndicator组件 (状态显示)

#### 开发顺序
1. **ExportForm组件** (4小时)
   ```typescript
   // components/features/ExportForm/index.tsx
   interface ExportFormProps {
     onSubmit: (data: ExportFormData) => void;
     loading: boolean;
   }
   ```

2. **DataPreview组件** (5小时)
   ```typescript
   // components/features/DataPreview/index.tsx
   interface DataPreviewProps {
     data: InstagramUser[];
     loading: boolean;
     error?: string;
   }
   ```

3. **其他组件** (3小时)

#### 验收标准
- [x] 表单验证完整
- [x] 数据展示清晰
- [x] 加载状态友好
- [x] 错误处理完善

## 🔧 第三阶段：后端API开发

### 3.1 基础服务层开发
**时间**: 2天
**负责**: 后端开发

#### 任务清单
- [ ] InstagramService (数据获取)
- [ ] ExportService (文件生成)
- [ ] ValidationService (输入验证)
- [ ] Logger工具类

#### 开发顺序
1. **ValidationService** (3小时)
   - 用户名格式验证
   - 请求参数验证
   - 安全性检查

2. **InstagramService** (8小时)
   - Puppeteer浏览器初始化
   - 账户信息获取
   - 关注者列表爬取
   - 反反爬机制处理

3. **ExportService** (4小时)
   - Excel文件生成
   - 任务状态管理
   - 文件清理机制

4. **Logger工具** (1小时)
   - 统一日志格式
   - 不同级别日志
   - 错误堆栈记录

#### 验收标准
- [x] 能成功获取公开账户信息
- [x] 能导出前200个关注者
- [x] Excel文件格式正确
- [x] 错误处理完善

### 3.2 API接口开发
**时间**: 1.5天
**负责**: 后端开发

#### 任务清单
- [ ] 健康检查接口
- [ ] 账户分析接口
- [ ] 数据导出接口
- [ ] 状态查询接口
- [ ] 文件下载接口

#### API接口设计
```typescript
// 1. 健康检查
GET /api/health
Response: { status: 'ok', timestamp: string }

// 2. 账户分析
POST /api/export/analyze
Body: { username: string }
Response: { success: boolean, data: AccountInfo }

// 3. 导出关注者
POST /api/export/followers
Body: { username: string, maxCount: number }
Response: { success: boolean, data: { taskId: string } }

// 4. 查询状态
GET /api/export/status/:taskId
Response: { success: boolean, data: TaskStatus }

// 5. 下载文件
GET /api/export/download/:taskId
Response: File Download
```

#### 验收标准
- [x] 所有接口响应格式统一
- [x] 错误码和消息规范
- [x] 请求限制正常工作
- [x] 安全验证有效

### 3.3 安全与性能优化
**时间**: 0.5天
**负责**: 后端开发

#### 任务清单
- [ ] 请求频率限制
- [ ] CORS配置
- [ ] 安全头设置
- [ ] 错误处理中间件

#### 安全配置
```typescript
// 1. 频率限制
app.use('/api/export', exportLimiter); // 1小时5次
app.use('/api', generalLimiter); // 15分钟100次

// 2. 安全头
app.use(helmet({
  contentSecurityPolicy: false,
  crossOriginEmbedderPolicy: false
}));

// 3. CORS配置
app.use(cors({
  origin: process.env.CORS_ORIGIN,
  credentials: true
}));
```

#### 验收标准
- [x] 限流机制有效
- [x] 安全头配置正确
- [x] CORS策略合理
- [x] 错误信息安全

## 🔗 第四阶段：集成与优化

### 4.1 前后端集成
**时间**: 1天
**负责**: 全栈开发

#### 任务清单
- [ ] API客户端封装
- [ ] 状态管理连接
- [ ] 错误处理统一
- [ ] 加载状态管理

#### 集成步骤
1. **API客户端** (3小时)
   ```typescript
   // utils/api.ts
   class ApiClient {
     async analyzeAccount(username: string): Promise<AccountInfo>
     async exportFollowers(username: string): Promise<ExportTask>
     async getTaskStatus(taskId: string): Promise<TaskStatus>
     async downloadFile(taskId: string): Promise<void>
   }
   ```

2. **状态管理集成** (3小时)
   ```typescript
   // stores/exportStore.ts
   const useExportStore = create<ExportState>((set, get) => ({
     async startExport(username: string) {
       // API调用逻辑
     },
     async checkStatus(taskId: string) {
       // 状态轮询逻辑
     }
   }));
   ```

3. **错误处理** (2小时)
   - 网络错误处理
   - 业务错误提示
   - 重试机制

#### 验收标准
- [x] 前后端数据传输正常
- [x] 错误信息用户友好
- [x] 加载状态反馈及时
- [x] 文件下载功能正常

### 4.2 多语言实现
**时间**: 1天
**负责**: 前端开发

#### 任务清单
- [ ] i18n配置初始化
- [ ] 翻译文件创建
- [ ] 组件国际化改造
- [ ] 语言自动检测

#### 多语言配置
```typescript
// i18n/index.ts
i18n
  .use(initReactI18next)
  .init({
    resources: {
      en: { translation: require('./locales/en.json') },
      'zh-CN': { translation: require('./locales/zh-CN.json') },
      'zh-TW': { translation: require('./locales/zh-TW.json') },
      it: { translation: require('./locales/it.json') },
      es: { translation: require('./locales/es.json') },
    },
    lng: detectLanguage(),
    fallbackLng: 'en',
  });
```

#### 翻译文件示例
```json
// locales/zh-CN.json
{
  "header": {
    "title": "IGExportGuru",
    "subtitle": "轻松导出Instagram列表"
  },
  "export": {
    "inputPlaceholder": "输入Instagram用户名或链接",
    "followers": "关注者",
    "following": "正在关注",
    "exportButton": "导出 (最多{{maxCount}}个用户)"
  }
}
```

#### 验收标准
- [x] 所有UI文本支持多语言
- [x] 语言切换实时生效
- [x] 浏览器语言自动检测
- [x] 语言偏好本地存储

### 4.3 性能优化
**时间**: 1天
**负责**: 全栈开发

#### 前端优化任务
- [ ] 组件懒加载
- [ ] 图片优化
- [ ] 代码分割
- [ ] 缓存策略

#### 后端优化任务
- [ ] 响应压缩
- [ ] 内存缓存
- [ ] 资源清理
- [ ] 数据库优化

#### 优化措施
```typescript
// 前端: 组件懒加载
const DataPreview = lazy(() => import('@/components/features/DataPreview'));

// 前端: 缓存API响应
const cachedApiCall = useMemo(() => apiClient.analyzeAccount, []);

// 后端: 响应压缩
app.use(compression());

// 后端: 内存缓存
const cache = new Map<string, any>();
```

#### 验收标准
- [x] 首屏加载时间<2秒
- [x] 页面交互响应<100ms
- [x] 包体积合理
- [x] 内存使用稳定

## 🧪 第五阶段：测试与部署

### 5.1 功能测试
**时间**: 1天
**负责**: 全栈开发

#### 测试清单
- [ ] 用户输入验证测试
- [ ] 数据导出功能测试
- [ ] 多语言切换测试
- [ ] 响应式设计测试
- [ ] 错误场景测试

#### 测试用例
```typescript
// 测试示例
describe('导出功能测试', () => {
  test('有效用户名应该成功分析', async () => {
    const result = await apiClient.analyzeAccount('instagram');
    expect(result.success).toBe(true);
  });
  
  test('无效用户名应该返回错误', async () => {
    const result = await apiClient.analyzeAccount('invalid-user');
    expect(result.success).toBe(false);
  });
});
```

#### 验收标准
- [x] 核心功能100%可用
- [x] 错误场景处理正确
- [x] 用户体验流畅
- [x] 跨浏览器兼容

### 5.2 部署配置
**时间**: 1天
**负责**: DevOps

#### 部署任务
- [ ] 前端部署到Vercel
- [ ] 后端部署到Railway
- [ ] 环境变量配置
- [ ] 域名和SSL配置

#### 部署步骤
1. **前端部署** (2小时)
   ```bash
   # Vercel配置
   npm run build
   vercel --prod
   ```

2. **后端部署** (3小时)
   ```bash
   # Railway部署
   railway login
   railway link
   railway up
   ```

3. **环境配置** (2小时)
   - 生产环境变量
   - 数据库连接
   - 第三方服务配置

4. **域名配置** (1小时)
   - 自定义域名绑定
   - SSL证书配置
   - CDN加速设置

#### 验收标准
- [x] 生产环境正常运行
- [x] HTTPS访问正常
- [x] API接口可用
- [x] 性能指标达标

## 📈 质量保证

### 代码质量标准
- **TypeScript覆盖率**: 100%
- **ESLint检查**: 0错误
- **单元测试覆盖率**: >80%
- **性能评分**: >90分

### 用户体验标准
- **首屏加载**: <2秒
- **交互响应**: <100ms
- **移动端体验**: 优秀
- **无障碍访问**: 符合WCAG标准

### 安全标准
- **输入验证**: 完整
- **XSS防护**: 有效
- **CSRF保护**: 启用
- **数据加密**: HTTPS

## 🔄 项目管理

### 每日站会
- **时间**: 每天上午9:00
- **时长**: 15分钟
- **内容**: 进度同步、问题讨论、任务分配

### 代码审查
- **要求**: 所有代码必须经过审查
- **标准**: 功能正确、代码规范、性能良好
- **工具**: GitHub Pull Request

### 风险管控
- **技术风险**: Instagram反爬机制变化
- **进度风险**: 复杂功能开发延期
- **质量风险**: 跨浏览器兼容性问题

### 应急预案
- **技术问题**: 48小时内解决或降级处理
- **进度延期**: 优先级调整和功能裁剪
- **质量问题**: 立即修复和回归测试

---

*最后更新: 2024年12月*
*版本: v1.0*
